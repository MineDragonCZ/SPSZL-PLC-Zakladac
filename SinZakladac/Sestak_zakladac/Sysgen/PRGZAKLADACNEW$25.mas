#srcfile 'C:\MOSAICAPP\SINZAKLADAC\SESTAK_ZAKLADAC\PRGZAKLADACNEW.ST'

#defpou prgZakladacNew
  int zakladac_state,
  int current_slot,
  bool start,
  bool stop,
  bool pohyb_dokoncen,
  TON timer_1,
  bool timer_1_done

 
#srcfile 'C:\MOSAICAPP\SINZAKLADAC\SESTAK_ZAKLADAC\PRGZAKLADACNEW.ST'
#pou prgZakladacNew
#srcline 1 ;PROGRAM prgZakladacNew

#struct prgZakladacNew__temp__
  dint P0__st__
P     61
prgZakladacNew_L0:
 LINK __SizeOf(prgZakladacNew__temp__)
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 30 ;  pohyb_dokoncen := (pohybDokoncen_hor AND pohybDokoncen_ver);
 LD   bool pohybDokoncen_hor
#debug bool pohybDokoncen_hor
 LD   bool pohybDokoncen_ver
#debug bool pohybDokoncen_ver
 AND
 WRX  pohyb_dokoncen
#debug_left bool pohyb_dokoncen
#srcline 31 ;  zhaveniMotoru_hor := 1;
 LD   bool -1      ; true
 WR   bool zhaveniMotoru_hor
#debug_left bool zhaveniMotoru_hor
#srcline 32 ;  zhaveniMotoru_ver := 1;
 LD   bool -1      ; true
 WR   bool zhaveniMotoru_ver
#debug_left bool zhaveniMotoru_ver
#srcline 34 ;  timer_1_done := timer_1.Q;
 LDX  timer_1~Q
#debug bool timer_1.Q
 WRX  timer_1_done
#debug_left bool timer_1_done
#srcline 35 ;  timer_1(IN := NOT(timer_1_done), PT := t#500ms);
 LDX  timer_1_done
#debug bool timer_1_done
 NEG
 WRX  timer_1~IN
#debug_left bool timer_1~IN
 LD   time 500
 WRX  timer_1~PT
#debug_left time timer_1~PT
 LEAX timer_1
 CAL  TON_L0
#srcline 37 ;  IF pohyb_dokoncen AND timer_1_done THEN
 LDX  pohyb_dokoncen
#debug bool pohyb_dokoncen
 LDX  timer_1_done
#debug bool timer_1_done
 AND
 JMC  prgZakladacNew_L1
#srcline 38 ;    CASE zakladac_state OF
 LDX  zakladac_state
#debug int zakladac_state
 EXTW 
 WRY  P0__st__
 LD   0
 LDY  P0__st__
 EQ  
 JMC  prgZakladacNew_L4
#srcline 39 ;         0:
#srcline 40 ;           IF start AND NOT(stop) THEN
 LDX  start
#debug bool start
 LDX  stop
#debug bool stop
 NEG
 AND
 JMC  prgZakladacNew_L5
#srcline 41 ;              zakladac_state := 1;
 LD   int 1
 WRX  zakladac_state
#debug_left int zakladac_state
#srcline 42 ;//              timer_1_done := false;
#srcline 43 ;              RETURN;
 JMP  prgZakladacNew_RET
#srcline 44 ;           END_IF;
prgZakladacNew_L5:
 JMP  prgZakladacNew_L3
prgZakladacNew_L4:
 LD   1
 LDY  P0__st__
 EQ  
 JMC  prgZakladacNew_L7
#srcline 45 ;         1:
#srcline 46 ;            motor_hor_0 := 0;
 LD   bool 0       ; false
 WR   motor_hor_0
#debug_left bool motor_hor_0
#srcline 47 ;            motor_hor_1 := 0;
 LD   bool 0       ; false
 WR   motor_hor_1
#debug_left bool motor_hor_1
#srcline 48 ;            motor_hor_2 := 0;
 LD   bool 0       ; false
 WR   motor_hor_2
#debug_left bool motor_hor_2
#srcline 49 ;            motor_hor_3 := 0;
 LD   bool 0       ; false
 WR   motor_hor_3
#debug_left bool motor_hor_3
#srcline 50 ;            vyberMotoru := 0;
 LD   bool 0       ; false
 WR   bool vyberMotoru
#debug_left bool vyberMotoru
#srcline 51 ;            startMotoru := 1;
 LD   bool -1      ; true
 WR   bool startMotoru
#debug_left bool startMotoru
#srcline 52 ;            zakladac_state := 2;
 LD   int 2
 WRX  zakladac_state
#debug_left int zakladac_state
#srcline 53 ;            current_slot := 5;
 LD   int 5
 WRX  current_slot
#debug_left int current_slot
#srcline 54 ;            timer_1_done := false;
 LD   bool 0       ; false
 WRX  timer_1_done
#debug_left bool timer_1_done
#srcline 55 ;         ;
 JMP  prgZakladacNew_L3
prgZakladacNew_L7:
 LD   2
 LDY  P0__st__
 EQ  
 JMC  prgZakladacNew_L8
#srcline 56 ;         2:
#srcline 57 ;            motor_ver_0 := 0;
 LD   bool 0       ; false
 WR   motor_ver_0
#debug_left bool motor_ver_0
#srcline 58 ;            motor_ver_1 := 0;
 LD   bool 0       ; false
 WR   motor_ver_1
#debug_left bool motor_ver_1
#srcline 59 ;            motor_ver_2 := 0;
 LD   bool 0       ; false
 WR   motor_ver_2
#debug_left bool motor_ver_2
#srcline 60 ;            motor_ver_3 := 0;
 LD   bool 0       ; false
 WR   motor_ver_3
#debug_left bool motor_ver_3
#srcline 61 ;            vyberMotoru := 1;
 LD   bool -1      ; true
 WR   bool vyberMotoru
#debug_left bool vyberMotoru
#srcline 62 ;            startMotoru := 1;
 LD   bool -1      ; true
 WR   bool startMotoru
#debug_left bool startMotoru
#srcline 63 ;            zakladac_state := 3;
 LD   int 3
 WRX  zakladac_state
#debug_left int zakladac_state
#srcline 64 ;            timer_1_done := false;
 LD   bool 0       ; false
 WRX  timer_1_done
#debug_left bool timer_1_done
#srcline 65 ;         ;
 JMP  prgZakladacNew_L3
prgZakladacNew_L8:
 LD   3
 LDY  P0__st__
 EQ  
 JMC  prgZakladacNew_L9
#srcline 66 ;         3:
#srcline 67 ;            timer_1_done := false;
 LD   bool 0       ; false
 WRX  timer_1_done
#debug_left bool timer_1_done
#srcline 68 ;            IF current_slot > 5 THEN
 LDX  current_slot
#debug int current_slot
 EXTW 
 LD   int 5
 GTS
 JMC  prgZakladacNew_L10
#srcline 69 ;               current_slot := 0;
 LD   int 0
 WRX  current_slot
#debug_left int current_slot
#srcline 70 ;            ELSE
 JMP  prgZakladacNew_L11
prgZakladacNew_L10:
#srcline 71 ;                current_slot := current_slot + 1;
 LDX  current_slot
#debug int current_slot
 EXTW 
 LD   int 1
 ADD
 EXTW
 WRX  current_slot
#debug_left int current_slot
#srcline 72 ;            END_IF
prgZakladacNew_L11:
#srcline 74 ;            IF materialJe THEN
 LD   bool materialJe
#debug bool materialJe
 JMC  prgZakladacNew_L12
#srcline 75 ;               zakladac_state := 4;
 LD   int 4
 WRX  zakladac_state
#debug_left int zakladac_state
#srcline 76 ;            ELSE
 JMP  prgZakladacNew_L13
prgZakladacNew_L12:
#srcline 77 ;                zakladac_state := 3;
 LD   int 3
 WRX  zakladac_state
#debug_left int zakladac_state
#srcline 78 ;            END_IF
prgZakladacNew_L13:
#srcline 79 ;         ;
 JMP  prgZakladacNew_L3
prgZakladacNew_L9:
prgZakladacNew_L3:
#srcline 81 ;  END_IF
prgZakladacNew_L1:
#srcline 82 ;END_PROGRAM
prgZakladacNew_RET:
 ULNK
RET
E     61

; Initialize - variables
P     61
prgZakladacNew__InstanceInit__:
 LINK 0
 LD   int 0
 WRX  current_slot
 ULNK
RET
E     61
; End initialize - variables
#endpou 



 

#srcfile ''
